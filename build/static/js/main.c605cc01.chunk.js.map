{"version":3,"sources":["main.js","App.js","serviceWorker.js","index.js"],"names":["Main","props","typechange","e","setState","type","target","value","lengthchange","length","generate","res","state","generateWord","generateSentence","generateParagraph","lorem","len","sentences","i","wordLen","Math","random","paragraphs","temp","len2","word","j","letters","substr","letterLen","rawMarkup","__html","this","className","min","onChange","onClick","data-clipboard-target","id","dangerouslySetInnerHTML","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.c605cc01.chunk.js","sourcesContent":["import React, { Component } from 'react'\nclass Main extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      length: 1,\n      type: '1',\n      lorem: 'Lorem ipsum dolor sit emet',\n    }\n\n    this.letters =\n      'ሀሁሂሃሄህሆለሉሊላሌልሎሐሑሒሓሔሕሖመሙሚማሜምሞሠሡሢሣሤሥሦረሩሪራሬርሮሰሱሲሳሴስሶሸሹሺሻሼሽሾቀቁቂቃቄቅቆቇበቡቢባቤብቦቨቩቪቫቬቭቮተቱቲታቴትቶቸቹቺቻቼችቾነኑኒናኔንኖኘኙኚኛኜኝኞአኡኢኣኤእኦከኩኪካኬክኮኰኲኳኴኵኸኹኺኻኼኽኾወዉዊዋዌውዎዏዐዑዒዓዔዕዖዘዙዚዛዜዝዞዟዠዡዢዣዤዥዦየዩዪያዬይዮዯደዱዲዳዴድዶዷዸዹዺዻዼዽዾዿጀጁጂጃጄጅጆጇገጉጊጋጌግጎጏጐጒጓጔጕጠጡጢጣጤጥጦጧጨጩጪጫጬጭጮጯጰጱጲጳጴጵጶጷጸጹጺጻጼጽጾፀፁፂፃፄፅፆፇፈፉፊፋፌፍፎፐፑፒፓፔፕፖፗፘ'\n    this.letterLen = this.letters.length\n  }\n  typechange = (e) => {\n    this.setState({ type: e.target.value })\n  }\n  lengthchange = (e) => {\n    this.setState({ length: e.target.value })\n  }\n  generate = () => {\n    var res = ''\n    if (this.state.type === '1') {\n      res = this.generateWord(this.state.length)\n    } else if (this.state.type === '2') {\n      res = this.generateSentence(this.state.length)\n    } else if (this.state.type === '3') {\n      res = this.generateParagraph(this.state.length)\n    }\n    res = 'ሎሬም ኢፕሰም ዶሎር ሲት ኣሜት ' + res\n    this.setState({ lorem: res })\n  }\n  generateSentence = (len) => {\n    var sentences = ''\n    for (let i = 0; i < len; i++) {\n      var wordLen = 3 + Math.random() * 10\n      sentences += this.generateWord(wordLen) + '። &nbsp;'\n    }\n    return sentences\n  }\n  generateParagraph = (len) => {\n    var paragraphs = ''\n    for (let i = 0; i < len; i++) {\n      var wordLen = 3 + Math.random() * 10\n      paragraphs += '<p class=\"text-left\">' + this.generateSentence(wordLen) + '</p>'\n    }\n    return paragraphs\n  }\n\n  generateWord = (len) => {\n    var temp = ''\n    for (let i = 0; i < len; i++) {\n      var len2 = 2 + Math.random() * 3\n      var word = ''\n      for (let j = 0; j < len2; j++) {\n        word += this.letters.substr(Math.random() * this.letterLen, 1)\n      }\n      temp +=  ' '+word\n    }\n    return temp\n  }\n  rawMarkup = () => {\n    var rawMarkup = this.state.lorem\n    return { __html: rawMarkup }\n  }\n  componentDidMount() {\n    this.generate()\n  }\n  render() {\n    return (\n      <div className=\"row\">\n        <div className=\"col-md-4 card mt-1\">\n          <div>\n            <div>\n              <p>\n                ሎሬም ኢፕሰም አቀማመጦችን እና የእይታ መሳቂያዎችን ቅድመ ዕይታ ለመመልከት በግራፊክ ፣ በሕትመት እና\n                በሕትመት ኢንዱስትሪዎች ውስጥ በብዛት ጥቅም ላይ የሚውለው የቦታ ያዥ ጽሑፍ ነው ፡፡\n              </p>\n            </div>\n            <div className=\"card-body\">\n              <div className=\"form-group row\">\n                <label className=\"form-label col-sm-3\">Length</label>\n                <input\n                  min=\"1\"\n                  type=\"number\"\n                  className=\"form-control col-sm-9\"\n                  onChange={this.lengthchange}\n                  value={this.state.length}\n                />\n              </div>\n\n              <div className=\"form-group row\">\n                <label className=\"form-label col-sm-3\">Type</label>\n                <select\n                  className=\"form-control col-sm-9\"\n                  onChange={this.typechange}\n                >\n                  <option value=\"1\">Word</option>\n                  <option value=\"2\">Sentence</option>\n                  <option value=\"3\">Paragraph</option>\n                </select>\n              </div>\n\n              <button\n                className=\"btn btn-success float-right btn-flat btn-lg mb-1\"\n                onClick={this.generate}\n              >\n                Generate\n              </button>\n            </div>\n          </div>\n        </div>\n        <div className=\"col-md-8 card mt-1\">\n        <div>\n    <button  className=\"copy float-right mr-3 btn btn-outline-primary btn-sm mt-2\" data-clipboard-target=\"#content\">copy</button>\n    <span>\n    \n    </span>\n  </div>\n          <div id=\"content\"\n            className=\"card-body\"\n            dangerouslySetInnerHTML={this.rawMarkup()}\n          ></div>\n        </div>\n      </div>\n    )\n  }\n}\nexport default Main\n","import React from 'react';\nimport Main from './main';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n<nav className=\"navbar navbar-light bg-light\">\n  <span className=\"navbar-brand mb-0 h1\">ሎሬም ኢፕሰም</span>\n</nav>\n      <Main/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}